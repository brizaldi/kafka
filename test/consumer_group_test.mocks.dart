// Mocks generated by Mockito 5.3.2 from annotations
// in kafka/test/consumer_group_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:collection' as _i2;

import 'package:kafka/common.dart' as _i6;
import 'package:kafka/kafka.dart' as _i3;
import 'package:kafka/protocol.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQueue_0<E> extends _i1.SmartFake implements _i2.Queue<E> {
  _FakeQueue_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClusterMetadata_1 extends _i1.SmartFake
    implements _i3.ClusterMetadata {
  _FakeClusterMetadata_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGroupCoordinatorResponse_2 extends _i1.SmartFake
    implements _i4.GroupCoordinatorResponse {
  _FakeGroupCoordinatorResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [KafkaSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockKafkaSession extends _i1.Mock implements _i3.KafkaSession {
  MockKafkaSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Queue<_i3.ContactPoint> get contactPoints => (super.noSuchMethod(
        Invocation.getter(#contactPoints),
        returnValue: _FakeQueue_0<_i3.ContactPoint>(
          this,
          Invocation.getter(#contactPoints),
        ),
      ) as _i2.Queue<_i3.ContactPoint>);
  @override
  _i5.Future<Set<String>> listTopics() => (super.noSuchMethod(
        Invocation.method(
          #listTopics,
          [],
        ),
        returnValue: _i5.Future<Set<String>>.value(<String>{}),
      ) as _i5.Future<Set<String>>);
  @override
  _i5.Future<_i3.ClusterMetadata> getMetadata(
    Set<String>? topicNames, {
    bool? invalidateCache = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMetadata,
          [topicNames],
          {#invalidateCache: invalidateCache},
        ),
        returnValue:
            _i5.Future<_i3.ClusterMetadata>.value(_FakeClusterMetadata_1(
          this,
          Invocation.method(
            #getMetadata,
            [topicNames],
            {#invalidateCache: invalidateCache},
          ),
        )),
      ) as _i5.Future<_i3.ClusterMetadata>);
  @override
  _i5.Future<_i4.GroupCoordinatorResponse> getConsumerMetadata(
          String? consumerGroup) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConsumerMetadata,
          [consumerGroup],
        ),
        returnValue: _i5.Future<_i4.GroupCoordinatorResponse>.value(
            _FakeGroupCoordinatorResponse_2(
          this,
          Invocation.method(
            #getConsumerMetadata,
            [consumerGroup],
          ),
        )),
      ) as _i5.Future<_i4.GroupCoordinatorResponse>);
  @override
  _i5.Future<dynamic> send(
    _i6.Broker? broker,
    _i4.KafkaRequest? request,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [
            broker,
            request,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
  @override
  _i5.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);
}
